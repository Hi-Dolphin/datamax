name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IS_PRERELEASE=false
          else
            IS_PRERELEASE=true
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Is prerelease: $IS_PRERELEASE"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(\-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  test:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short --cov=datamax -m "not network"

    - name: Check code quality
      run: |
        flake8 datamax/
        black --check datamax/
        isort --check-only datamax/
        mypy datamax/

  build:
    runs-on: ubuntu-latest
    needs: [validate, test]
    outputs:
      wheel_name: ${{ steps.build.outputs.wheel_name }}
      sdist_name: ${{ steps.build.outputs.sdist_name }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" datamax/__init__.py
        echo "Updated version to $VERSION"

    - name: Build package
      id: build
      run: |
        python -m build
        
        # Get the built file names
        WHEEL_NAME=$(ls dist/*.whl | head -n 1 | xargs basename)
        SDIST_NAME=$(ls dist/*.tar.gz | head -n 1 | xargs basename)
        
        echo "wheel_name=$WHEEL_NAME" >> $GITHUB_OUTPUT
        echo "sdist_name=$SDIST_NAME" >> $GITHUB_OUTPUT
        
        echo "Built files:"
        ls -la dist/

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [validate, build]
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f CHANGELOG.md ]]; then
          # Try to extract the changelog section for this version
          CHANGELOG=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "")
          
          if [[ -z "$CHANGELOG" ]]; then
            # Fallback: get unreleased changes
            CHANGELOG=$(awk '/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md || echo "")
          fi
          
          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="Release $VERSION"
          fi
        else
          CHANGELOG="Release $VERSION"
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > release_notes.md
        echo "Generated changelog:"
        cat release_notes.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: DataMax v${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease }}

  upload-assets:
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/${{ needs.build.outputs.wheel_name }}
        asset_name: ${{ needs.build.outputs.wheel_name }}
        asset_content_type: application/zip

    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/${{ needs.build.outputs.sdist_name }}
        asset_name: ${{ needs.build.outputs.sdist_name }}
        asset_content_type: application/gzip

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    if: github.repository == 'Hi-Dolphin/datamax' && !needs.validate.outputs.is_prerelease
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/
        verify_metadata: true
        skip_existing: false
        verbose: true

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    if: needs.validate.outputs.is_prerelease
    environment: test-pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        packages_dir: dist/
        verify_metadata: true
        skip_existing: true
        verbose: true

  update-docs:
    runs-on: ubuntu-latest
    needs: [validate, publish-pypi]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Update documentation
      run: |
        # Update version in documentation
        VERSION="${{ needs.validate.outputs.version }}"
        echo "Updating documentation for version $VERSION"
        
        # Add any documentation update logic here
        # For example, updating API docs, version references, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [validate, build, create-release, publish-pypi, publish-test-pypi]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.create-release.result == 'success'
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"
        
        if [[ "$IS_PRERELEASE" == "true" ]]; then
          echo "‚úÖ Pre-release v$VERSION created successfully"
        else
          echo "üöÄ Release v$VERSION published successfully"
        fi
        
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "‚ùå Release v$VERSION failed"
        
        # Add failure notification logic here

  cleanup:
    runs-on: ubuntu-latest
    needs: [validate, build, create-release, publish-pypi, publish-test-pypi]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Release workflow completed"
        echo "Version: ${{ needs.validate.outputs.version }}"
        echo "Is prerelease: ${{ needs.validate.outputs.is_prerelease }}"
        
        # Add any cleanup logic here if needed