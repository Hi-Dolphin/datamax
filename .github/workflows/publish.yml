name: 发布到PyPI和创建标签

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本类型 (major, minor, patch, prerelease)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      custom_version:
        description: '自定义版本号 (可选，如果提供则忽略版本类型)'
        required: false
        type: string
  # 推送到main分支时的版本标签
  push:
    tags:
      - 'v*'

# 添加权限声明
permissions:
  contents: write    # 允许创建和修改仓库内容
  packages: write    # 允许发布包
  pull-requests: write    # 允许创建和修改PR
  issues: write      # 允许创建和修改issues
  actions: read      # 允许读取actions
  checks: write      # 允许写入检查结果

env:
  PYTHON_VERSION: '3.10'

jobs:
  validate-and-test:
    name: 验证和测试
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
      job_status: ${{ job.status }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        # 检查requirements.txt是否存在，如果存在则安装
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt 不存在，跳过依赖安装"
        fi

    - name: 版本管理
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # 从setup.py获取当前版本
            CURRENT_VERSION=$(python setup.py --version)
            echo "当前版本: $CURRENT_VERSION"

            # 根据版本类型计算新版本
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            case "${{ github.event.inputs.version_type }}" in
              major)
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
              prerelease)
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-rc.$(date +%s)"
                ;;
            esac
          fi
          echo "新版本: $NEW_VERSION"

          # 更新setup.py中的版本
          sed -i "s/version='[^']*'/version='$NEW_VERSION'/g" setup.py

        else
          # 从标签获取版本
          NEW_VERSION=${GITHUB_REF#refs/tags/v}
          echo "标签版本: $NEW_VERSION"

          # 更新setup.py中的版本
          sed -i "s/version='[^']*'/version='$NEW_VERSION'/g" setup.py
        fi

        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: 验证版本更新
      run: |
        python setup.py --version
        echo "Setup.py版本: $(python setup.py --version)"

    - name: 代码质量检查
      run: |
        # 检查setup.py语法
        python -m py_compile setup.py

        # 检查包是否可以正确导入
        python -c "import setuptools; setuptools.setup()" --help-commands > /dev/null

    - name: 构建包
      run: |
        python -m build

    - name: 验证包
      run: |
        # 检查包的完整性
        python -m twine check dist/*

        # 测试安装
        pip install dist/*.whl
        python -c "import datamax; print('包导入成功')"

    - name: 检查是否应该发布
      id: check
      run: |
        # 总是允许发布 - 让PyPI自己处理重复版本的错误
        VERSION="${{ steps.version.outputs.version }}"
        echo "准备发布版本: $VERSION"
        echo "should_publish=true" >> $GITHUB_OUTPUT
        echo "版本检查完成，允许发布"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  debug-info:
    name: 调试信息
    needs: validate-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: 输出调试信息
      run: |
        echo "=== 调试信息 ==="
        echo "validate-and-test.result: ${{ needs.validate-and-test.result }}"
        echo "validate-and-test.outputs.should_publish: ${{ needs.validate-and-test.outputs.should_publish }}"
        echo "validate-and-test.outputs.version: ${{ needs.validate-and-test.outputs.version }}"
        echo "github.event_name: ${{ github.event_name }}"
        echo "=== 条件判断结果 ==="
        echo "should_publish == 'true': ${{ needs.validate-and-test.outputs.should_publish == 'true' }}"
        echo "result == 'success': ${{ needs.validate-and-test.result == 'success' }}"
        echo "综合条件: ${{ needs.validate-and-test.outputs.should_publish == 'true' && needs.validate-and-test.result == 'success' }}"

  publish-pypi:
    name: 发布到PyPI
    needs: validate-and-test
    if: needs.validate-and-test.outputs.should_publish == 'true' && needs.validate-and-test.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pydatamax

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: 发布到测试PyPI (可选)
      if: contains(needs.validate-and-test.outputs.version, 'rc')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

    - name: 发布到PyPI
      if: ${{ !contains(needs.validate-and-test.outputs.version, 'rc') }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-release:
    name: 创建GitHub Release
    needs: [validate-and-test, publish-pypi]
    if: needs.validate-and-test.outputs.should_publish == 'true' && needs.validate-and-test.result == 'success'
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 提交版本更新
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add setup.py
        git commit -m "bump: 版本更新至 v${{ needs.validate-and-test.outputs.version }}" || exit 0
        git push

    - name: 创建标签
      if: github.event_name == 'workflow_dispatch'
      run: |
        git tag -a "v${{ needs.validate-and-test.outputs.version }}" -m "Release v${{ needs.validate-and-test.outputs.version }}"
        git push origin "v${{ needs.validate-and-test.outputs.version }}"

    - name: 收集变更信息
      id: collect_changes
      run: |
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        CURRENT_VERSION="v${{ needs.validate-and-test.outputs.version }}"
        
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        if [ -n "$PREVIOUS_TAG" ]; then
          # 收集提交信息
          echo "=== COMMITS ===" > changes_raw.txt
          git log --pretty=format:"COMMIT: %s%nAUTHOR: %an <%ae>%nDATE: %ad%nHASH: %h%nBODY: %b%n---" --date=short $PREVIOUS_TAG..HEAD >> changes_raw.txt
          
          # 收集文件变更
          echo "" >> changes_raw.txt
          echo "=== FILE CHANGES ===" >> changes_raw.txt
          git diff --name-status $PREVIOUS_TAG..HEAD >> changes_raw.txt
          
          # 收集详细的文件变更（限制大小）
          echo "" >> changes_raw.txt
          echo "=== DETAILED CHANGES ===" >> changes_raw.txt
          git diff --stat $PREVIOUS_TAG..HEAD >> changes_raw.txt
          
          # 获取仓库信息
          echo "" >> changes_raw.txt
          echo "=== REPOSITORY INFO ===" >> changes_raw.txt
          echo "Repository: ${{ github.repository }}" >> changes_raw.txt
          echo "Previous Tag: $PREVIOUS_TAG" >> changes_raw.txt
          echo "Current Version: $CURRENT_VERSION" >> changes_raw.txt
          echo "Project: DataMax - Python数据处理工具包" >> changes_raw.txt
        else
          echo "=== FIRST RELEASE ===" > changes_raw.txt
          echo "This is the first release of DataMax" >> changes_raw.txt
        fi

    - name: AI智能总结变更
      id: ai_summary
      run: |
        if [ ! -f "changes_raw.txt" ]; then
          echo "No changes file found, skipping AI summary"
          echo "ai_summary_available=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 安装依赖
        pip install requests
        
        # 运行AI总结脚本
        python .github/scripts/generate_release_notes.py
        
        if [ -f "ai_summary.txt" ]; then
          echo "ai_summary_available=true" >> $GITHUB_OUTPUT
        else
          echo "ai_summary_available=false" >> $GITHUB_OUTPUT
        fi
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    - name: 生成最终的Release Notes
      id: final_changelog
      run: |
        PREVIOUS_TAG="${{ steps.collect_changes.outputs.previous_tag }}"
        CURRENT_VERSION="${{ steps.collect_changes.outputs.current_version }}"
        
        # 创建Release Notes头部
        cat > CHANGELOG.md << EOF
        ## 🚀 DataMax v${{ needs.validate-and-test.outputs.version }}
        
        > **发布时间**: $(date '+%Y-%m-%d %H:%M:%S')  
        > **PyPI包**: [pydatamax ${{ needs.validate-and-test.outputs.version }}](https://pypi.org/project/pydatamax/${{ needs.validate-and-test.outputs.version }}/)
        
        ### 📦 安装方式
        
        \`\`\`bash
        pip install pydatamax==${{ needs.validate-and-test.outputs.version }}
        \`\`\`
        
        EOF
        
        # 添加AI总结内容
        if [ "${{ steps.ai_summary.outputs.ai_summary_available }}" = "true" ] && [ -f "ai_summary.txt" ]; then
          echo "" >> CHANGELOG.md
          cat ai_summary.txt >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        else
          # Fallback到原始方法
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📝 更新内容" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "自 $PREVIOUS_TAG 以来的更改:" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # 分类提交信息
            git log --pretty=format:"%s|%h" $PREVIOUS_TAG..HEAD | while IFS='|' read -r subject hash; do
              if echo "$subject" | grep -qi "^feat\|^add\|^新增"; then
                echo "- ✨ $subject \`$hash\`" >> CHANGELOG.md
              elif echo "$subject" | grep -qi "^fix\|^修复\|^bug"; then
                echo "- 🐛 $subject \`$hash\`" >> CHANGELOG.md
              elif echo "$subject" | grep -qi "^docs\|^文档"; then
                echo "- 📚 $subject \`$hash\`" >> CHANGELOG.md
              else
                echo "- 📝 $subject \`$hash\`" >> CHANGELOG.md
              fi
            done
            echo "" >> CHANGELOG.md
          else
            echo "### 🎉 首次发布" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "DataMax 是一个强大的Python数据处理工具包，支持多种文件格式的解析和处理。" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
        fi
        
        # 添加贡献者信息
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### 👥 贡献者" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"%an|%ae" $PREVIOUS_TAG..HEAD | sort -u | while IFS='|' read -r name email; do
            if [[ "$email" == *"@users.noreply.github.com" ]]; then
              username=$(echo "$email" | sed 's/@users.noreply.github.com//')
              echo "- [@$username](https://github.com/$username)" >> CHANGELOG.md
            else
              echo "- $name" >> CHANGELOG.md
            fi
          done
          echo "" >> CHANGELOG.md
        fi
        
        # 添加统计信息和链接
        cat >> CHANGELOG.md << EOF
        ### 📊 版本统计
        
        EOF
        
        if [ -n "$PREVIOUS_TAG" ]; then
          COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..HEAD)
          FILES_CHANGED=$(git diff --name-only $PREVIOUS_TAG..HEAD | wc -l)
          echo "- 📈 新增提交: $COMMIT_COUNT 个" >> CHANGELOG.md
          echo "- 📁 文件变更: $FILES_CHANGED 个" >> CHANGELOG.md
        fi
        
        cat >> CHANGELOG.md << EOF
        
        ### 🔗 相关链接
        
        - 📖 [项目文档](https://github.com/${{ github.repository }})
        - 🐛 [问题反馈](https://github.com/${{ github.repository }}/issues)
        - 💬 [讨论区](https://github.com/${{ github.repository }}/discussions)
        - 📦 [PyPI包](https://pypi.org/project/pydatamax/)
        
        ---
        EOF
        
        # 添加完整更新日志链接
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "**完整更新日志**: [${PREVIOUS_TAG}...v${{ needs.validate-and-test.outputs.version }}](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${{ needs.validate-and-test.outputs.version }})" >> CHANGELOG.md
        fi

    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-and-test.outputs.version }}
        name: 🚀 DataMax v${{ needs.validate-and-test.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(needs.validate-and-test.outputs.version, 'rc') }}
        token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        generate_release_notes: true

  notify:
    name: 发布通知
    needs: [validate-and-test, publish-pypi, create-release]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: 发布成功通知
      if: needs.publish-pypi.result == 'success' && needs.create-release.result == 'success'
      run: |
        echo "🎉 DataMax v${{ needs.validate-and-test.outputs.version }} 发布成功!"
        echo "📦 PyPI: https://pypi.org/project/pydatamax/${{ needs.validate-and-test.outputs.version }}/"
        echo "🏷️ GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate-and-test.outputs.version }}"

    - name: 发布失败通知
      if: needs.publish-pypi.result == 'failure' || needs.create-release.result == 'failure'
      run: |
        echo "❌ DataMax v${{ needs.validate-and-test.outputs.version }} 发布失败!"
        echo "请检查工作流日志以获取详细信息。"
