name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with flake8
      run: |
        flake8 datamax/  --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 datamax/  --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check datamax/

    - name: Check import sorting with isort
      run: |
        isort --check-only datamax/

    - name: Type checking with mypy
      run: |
        mypy datamax/

    - name: Security check with bandit
      run: |
        bandit -r datamax/ -f json -o bandit-report.json || true
        bandit -r datamax/

    # - name: Run unit tests
    #   run: |
    #     pytest tests/ -v --tb=short --cov=datamax --cov-report=xml --cov-report=term-missing -m "not integration and not network"

    # - name: Run integration tests
    #   run: |
    #     pytest tests/ -v --tb=short -m "integration" --maxfail=5
    #   continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Check documentation
      run: |
        # Check if documentation can be built
        python -c "import datamax; help(datamax)"
        
        # Check docstring coverage
        python -m pydocstyle datamax/ --count || true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        bandit -r datamax/ -f json -o bandit-report.json || true
        bandit -r datamax/
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, docs]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  notify:
    runs-on: ubuntu-latest
    needs: [test, docs, security, build]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "CI pipeline failed on main branch"
        # Add notification logic here (Slack, email, etc.)

    - name: Notify on success
      if: needs.test.result == 'success' && needs.docs.result == 'success' && needs.build.result == 'success'
      run: |
        echo "CI pipeline succeeded on main branch"
        # Add notification logic here