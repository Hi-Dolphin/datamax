from __future__ import annotations

from typing import Any, Iterable, Sequence, Tuple

ndarray = Any

class _Linalg:
    def eigh(self, a: Any) -> Tuple[Any, Any]: ...

linalg: _Linalg

def array(obj: Any, dtype: Any = ..., copy: bool = ..., order: str | None = ..., subok: bool = ..., ndmin: int = ...) -> Any: ...

def zeros(shape: Any, dtype: Any = ..., order: str = ...) -> Any: ...

def maximum(x1: Any, x2: Any, out: Any = ..., where: Any = ..., casting: str = ..., order: str = ..., dtype: Any = ..., subok: bool = ...) -> Any: ...

def sqrt(x: Any, out: Any = ..., where: Any = ..., casting: str = ..., order: str = ..., dtype: Any = ..., subok: bool = ...) -> Any: ...

def sum(a: Any, axis: Any = ..., dtype: Any = ..., out: Any = ..., keepdims: Any = ..., initial: Any = ..., where: Any = ...) -> Any: ...

def max(a: Any, axis: Any = ..., out: Any = ..., keepdims: Any = ..., initial: Any = ..., where: Any = ...) -> Any: ...

def log(x: Any, out: Any = ..., where: Any = ..., casting: str = ..., order: str = ..., dtype: Any = ..., subok: bool = ...) -> Any: ...

def array_equal(a1: Any, a2: Any, equal_nan: bool = ...) -> bool: ...

def asarray(a: Any, dtype: Any = ..., order: str | None = ...) -> Any: ...
