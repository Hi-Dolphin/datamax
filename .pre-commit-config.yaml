# DataMax Pre-commit 配置
# 安装: pip install pre-commit && pre-commit install

repos:
  # 基础代码格式化
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: 移除行尾空格
      - id: end-of-file-fixer
        name: 确保文件末尾有换行符
      - id: check-yaml
        name: 检查YAML语法
      - id: check-json
        name: 检查JSON语法
      - id: check-toml
        name: 检查TOML语法
      - id: check-merge-conflict
        name: 检查合并冲突
      - id: debug-statements
        name: 检查调试语句
      - id: check-docstring-first
        name: 检查docstring位置

  # Python代码格式化
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        name: Black代码格式化
        language_version: python3

  # Import排序
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: 导入语句排序
        args: ["--profile", "black"]

  # 代码质量检查
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        name: Flake8代码检查
        args: [
          "--max-line-length=88",
          "--extend-ignore=E203,W503",
          "--exclude=.git,__pycache__,docs/source/conf.py,old,build,dist"
        ]

  # 安全检查
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: 安全漏洞检查
        args: ["-r", "datamax/"]
        exclude: ^tests/

  # 本地自定义钩子
  - repo: local
    hooks:
      # 验证setup.py
      - id: validate-setup
        name: 验证setup.py配置
        entry: python -m py_compile setup.py
        language: system
        files: setup\.py$

      # 检查版本号格式
      - id: validate-version
        name: 验证版本号格式
        entry: |
          python -c "
          import re, sys;
          content = open('setup.py').read();
          match = re.search(r\"version=['\\\"]([^'\\\"]+)['\\\"]\", content);
          version = match.group(1) if match else '';
          parts = version.split('.');
          assert len(parts) == 3 and all(p.isdigit() for p in parts), f'版本号格式错误: {version}';
          print(f'✅ 版本号格式正确: {version}')
          "
        language: system
        files: setup\.py$

      # 检查依赖同步
      - id: sync-requirements
        name: 检查requirements.txt和setup.py依赖同步
        entry: |
          python -c "
          import ast, re;
          # 读取setup.py中的依赖
          with open('setup.py') as f:
              tree = ast.parse(f.read());
          setup_call = next(node for node in ast.walk(tree) if isinstance(node, ast.Call) and getattr(node.func, 'id', None) == 'setup');
          install_requires = next(kw.value for kw in setup_call.keywords if kw.arg == 'install_requires');
          setup_deps = {ast.literal_eval(elt).split('>=')[0].split('==')[0].split('[')[0] for elt in install_requires.elts};
          # 读取requirements.txt中的依赖
          with open('requirements.txt') as f:
              req_deps = {line.strip().split('>=')[0].split('==')[0].split('[')[0] for line in f if line.strip() and not line.startswith('#')};
          # 检查差异
          missing_in_req = setup_deps - req_deps;
          missing_in_setup = req_deps - setup_deps;
          if missing_in_req: print(f'⚠️ requirements.txt中缺少: {missing_in_req}');
          if missing_in_setup: print(f'⚠️ setup.py中缺少: {missing_in_setup}');
          if not missing_in_req and not missing_in_setup: print('✅ 依赖同步检查通过');
          "
        language: system
        files: ^(setup\.py|requirements\.txt)$

# 全局配置
default_stages: [pre-commit]
fail_fast: false

# CI环境配置
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
